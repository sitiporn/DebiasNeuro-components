current dataset_name: mnli
Loading path for single at seed:1548, layer: 11
Q: ../counterfactuals/recent_baseline/seed_1548/avg_Q_counterfactual_representation.pickle
K: ../counterfactuals/recent_baseline/seed_1548/avg_K_counterfactual_representation.pickle
V: ../counterfactuals/recent_baseline/seed_1548/avg_V_counterfactual_representation.pickle
AO: ../counterfactuals/recent_baseline/seed_1548/avg_AO_counterfactual_representation.pickle
I: ../counterfactuals/recent_baseline/seed_1548/avg_I_counterfactual_representation.pickle
O: ../counterfactuals/recent_baseline/seed_1548/avg_O_counterfactual_representation.pickle
NIE_paths: ['../NIE/recent_baseline/seed_1548/avg_embeddings_High-overlap_computed_all_layers_.pickle']
current recent_baseline : seed : 1548
current seed in Experiment Dataset: 42
== statistic ==
{'High-overlap': 0.7777777777777778, 'Low-overlap': 0.0}
loading NIE : ../NIE/recent_baseline/seed_1548/avg_embeddings_High-overlap_computed_all_layers_.pickle
++++++++ Component-Neuron_id: 0.05 neurons :+++++++++
Done saving random top neurons into pickle !
geting advantaged samples.... 
using: mnli_clark.train.jsonl
Loading model from ../models/recent_baseline/seed_1548/checkpoint-36500/pytorch_model.bin
Loading model from : ../models/recent_baseline/seed_1548/checkpoint-36500/pytorch_model.bin
Bias model acc : {'accuracy': 0.4386812392093751}
entailment acc : {'accuracy': 0.5876515481401692}
contradiction acc : {'accuracy': 0.34619527436346}
neutral acc : {'accuracy': 0.3822001527883881}
candidated class : ['entailment']
Main model acc : {'accuracy': 0.9413015467199046}
saving to ../pickles/advantaged/mnli_recent_baseline_1548_inferences.pickle done ! 
loading to ../pickles/advantaged/mnli_recent_baseline_1548_inferences.pickle done ! 
bias shape : (392702, 16)
main shape : (392702, 6)
#advantaged samples: 8255, #disadvantaged samples: 384447
entailment : 8255
contradiction : 8255
neutral : 8255
Candidate entailment probs:
max: 0.7316202521
min: 0.3366440237
saving to ../pickles/advantaged/mnli_recent_baseline_clean_1548_inferences.pickle done ! 
entailment, max:0.7316202521, min:0.3366440237, mean:0.4565612006461844
#advantaged samples: 8255, #disadvantaged samples: 384447
Loading model from ../models/recent_baseline/seed_1548/checkpoint-36500/pytorch_model.bin
Loading updated model from : ../models/recent_baseline/seed_1548/checkpoint-36500/pytorch_model.bin to optimize on PCGU done!
Loading model from ../models/recent_baseline/seed_1548/checkpoint-36500/pytorch_model.bin
Loading reference model from : ../models/recent_baseline/seed_1548/checkpoint-36500/pytorch_model.bin done!
loading top neurons : ../pickles/top_neurons/recent_baseline/random_top_neuron_1548_percent_High-overlap_all_layers.pickle
freeze whole tensor: bert.embeddings.word_embeddings.weight
freeze whole tensor: bert.embeddings.position_embeddings.weight
freeze whole tensor: bert.embeddings.token_type_embeddings.weight
freeze whole tensor: bert.embeddings.LayerNorm.weight
freeze whole tensor: bert.embeddings.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.0.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.0.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.0.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.0.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.1.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.1.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.1.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.1.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.2.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.2.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.2.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.2.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.3.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.3.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.3.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.3.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.4.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.4.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.4.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.4.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.5.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.5.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.5.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.5.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.6.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.6.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.6.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.6.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.7.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.7.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.7.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.7.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.8.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.8.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.8.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.8.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.9.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.9.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.9.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.9.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.10.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.10.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.10.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.10.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.11.attention.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.11.attention.output.LayerNorm.bias
freeze whole tensor: bert.encoder.layer.11.output.LayerNorm.weight
freeze whole tensor: bert.encoder.layer.11.output.LayerNorm.bias
freeze whole tensor: bert.pooler.dense.weight
freeze whole tensor: bert.pooler.dense.bias
freeze whole tensor: classifier.weight
freeze whole tensor: classifier.bias
# weight train parameters:  4147 
# weight freeze parameters: 78797 
# weight total oparameters: 82944 
# bias train parameters:  4147 
# bias freeze parameters: 78797 
# bias total oparameters: 82944 
count_param : 165888
# weight train parameters:  4147 
# weight freeze parameters: 78797 
# weight total oparameters: 82944 
# bias train parameters:  4147 
# bias freeze parameters: 78797 
# bias total oparameters: 82944 
summary after combine parameters
********** weight  ************
# Train : 4147
# Freeze : 78797
# Total  : 82944
********** bias  ************
# Train : 4147
# Freeze : 78797
# Total  : 82944
saving 0's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer0_collect_param=False_components.pickle
saving 1's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer1_collect_param=False_components.pickle
saving 2's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer2_collect_param=False_components.pickle
saving 3's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer3_collect_param=False_components.pickle
saving 4's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer4_collect_param=False_components.pickle
saving 5's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer5_collect_param=False_components.pickle
saving 6's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer6_collect_param=False_components.pickle
saving 7's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer7_collect_param=False_components.pickle
saving 8's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer8_collect_param=False_components.pickle
saving 9's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer9_collect_param=False_components.pickle
saving 10's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer10_collect_param=False_components.pickle
saving 11's components into ../pickles/restore_weight/recent_baseline/masking-0.05/1548_radom_layer11_collect_param=False_components.pickle
checking:bert.encoder.layer.0.attention.self.query.weight, frozen: 767, train: 1, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.0.attention.self.query.weight
checking:bert.encoder.layer.0.attention.self.query.bias, frozen: 767, train: 1, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.0.attention.self.query.bias
checking:bert.encoder.layer.0.attention.self.key.weight, frozen: 767, train: 1, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.0.attention.self.key.weight
checking:bert.encoder.layer.0.attention.self.key.bias, frozen: 767, train: 1, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.0.attention.self.key.bias
checking:bert.encoder.layer.0.attention.self.value.weight, frozen: 768, train: 0, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.0.attention.self.value.weight
checking:bert.encoder.layer.0.attention.self.value.bias, frozen: 768, train: 0, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.0.attention.self.value.bias
checking:bert.encoder.layer.0.attention.output.dense.weight, frozen: 762, train: 6, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.0.attention.output.dense.weight
checking:bert.encoder.layer.0.attention.output.dense.bias, frozen: 762, train: 6, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.0.attention.output.dense.bias
checking:bert.encoder.layer.0.intermediate.dense.weight, frozen: 3069, train: 3, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.0.intermediate.dense.weight
checking:bert.encoder.layer.0.intermediate.dense.bias, frozen: 3069, train: 3, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.0.intermediate.dense.bias
checking:bert.encoder.layer.0.output.dense.weight, frozen: 756, train: 12, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.0.output.dense.weight
checking:bert.encoder.layer.0.output.dense.bias, frozen: 756, train: 12, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.0.output.dense.bias
checking:bert.encoder.layer.1.attention.self.query.weight, frozen: 768, train: 0, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.1.attention.self.query.weight
checking:bert.encoder.layer.1.attention.self.query.bias, frozen: 768, train: 0, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.1.attention.self.query.bias
checking:bert.encoder.layer.1.attention.self.key.weight, frozen: 747, train: 21, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.1.attention.self.key.weight
checking:bert.encoder.layer.1.attention.self.key.bias, frozen: 747, train: 21, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.1.attention.self.key.bias
checking:bert.encoder.layer.1.attention.self.value.weight, frozen: 766, train: 2, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.1.attention.self.value.weight
checking:bert.encoder.layer.1.attention.self.value.bias, frozen: 766, train: 2, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.1.attention.self.value.bias
checking:bert.encoder.layer.1.attention.output.dense.weight, frozen: 761, train: 7, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.1.attention.output.dense.weight
checking:bert.encoder.layer.1.attention.output.dense.bias, frozen: 761, train: 7, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.1.attention.output.dense.bias
checking:bert.encoder.layer.1.intermediate.dense.weight, frozen: 3071, train: 1, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.1.intermediate.dense.weight
checking:bert.encoder.layer.1.intermediate.dense.bias, frozen: 3071, train: 1, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.1.intermediate.dense.bias
checking:bert.encoder.layer.1.output.dense.weight, frozen: 760, train: 8, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.1.output.dense.weight
checking:bert.encoder.layer.1.output.dense.bias, frozen: 760, train: 8, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.1.output.dense.bias
checking:bert.encoder.layer.2.attention.self.query.weight, frozen: 766, train: 2, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.2.attention.self.query.weight
checking:bert.encoder.layer.2.attention.self.query.bias, frozen: 766, train: 2, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.2.attention.self.query.bias
checking:bert.encoder.layer.2.attention.self.key.weight, frozen: 763, train: 5, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.2.attention.self.key.weight
checking:bert.encoder.layer.2.attention.self.key.bias, frozen: 763, train: 5, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.2.attention.self.key.bias
checking:bert.encoder.layer.2.attention.self.value.weight, frozen: 764, train: 4, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.2.attention.self.value.weight
checking:bert.encoder.layer.2.attention.self.value.bias, frozen: 764, train: 4, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.2.attention.self.value.bias
checking:bert.encoder.layer.2.attention.output.dense.weight, frozen: 749, train: 19, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.2.attention.output.dense.weight
checking:bert.encoder.layer.2.attention.output.dense.bias, frozen: 749, train: 19, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.2.attention.output.dense.bias
checking:bert.encoder.layer.2.intermediate.dense.weight, frozen: 3068, train: 4, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.2.intermediate.dense.weight
checking:bert.encoder.layer.2.intermediate.dense.bias, frozen: 3068, train: 4, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.2.intermediate.dense.bias
checking:bert.encoder.layer.2.output.dense.weight, frozen: 732, train: 36, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.2.output.dense.weight
checking:bert.encoder.layer.2.output.dense.bias, frozen: 732, train: 36, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.2.output.dense.bias
checking:bert.encoder.layer.3.attention.self.query.weight, frozen: 766, train: 2, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.3.attention.self.query.weight
checking:bert.encoder.layer.3.attention.self.query.bias, frozen: 766, train: 2, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.3.attention.self.query.bias
checking:bert.encoder.layer.3.attention.self.key.weight, frozen: 752, train: 16, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.3.attention.self.key.weight
checking:bert.encoder.layer.3.attention.self.key.bias, frozen: 752, train: 16, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.3.attention.self.key.bias
checking:bert.encoder.layer.3.attention.self.value.weight, frozen: 765, train: 3, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.3.attention.self.value.weight
checking:bert.encoder.layer.3.attention.self.value.bias, frozen: 765, train: 3, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.3.attention.self.value.bias
checking:bert.encoder.layer.3.attention.output.dense.weight, frozen: 743, train: 25, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.3.attention.output.dense.weight
checking:bert.encoder.layer.3.attention.output.dense.bias, frozen: 743, train: 25, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.3.attention.output.dense.bias
checking:bert.encoder.layer.3.intermediate.dense.weight, frozen: 3068, train: 4, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.3.intermediate.dense.weight
checking:bert.encoder.layer.3.intermediate.dense.bias, frozen: 3068, train: 4, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.3.intermediate.dense.bias
checking:bert.encoder.layer.3.output.dense.weight, frozen: 710, train: 58, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.3.output.dense.weight
checking:bert.encoder.layer.3.output.dense.bias, frozen: 710, train: 58, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.3.output.dense.bias
checking:bert.encoder.layer.4.attention.self.query.weight, frozen: 755, train: 13, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.4.attention.self.query.weight
checking:bert.encoder.layer.4.attention.self.query.bias, frozen: 755, train: 13, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.4.attention.self.query.bias
checking:bert.encoder.layer.4.attention.self.key.weight, frozen: 759, train: 9, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.4.attention.self.key.weight
checking:bert.encoder.layer.4.attention.self.key.bias, frozen: 759, train: 9, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.4.attention.self.key.bias
checking:bert.encoder.layer.4.attention.self.value.weight, frozen: 764, train: 4, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.4.attention.self.value.weight
checking:bert.encoder.layer.4.attention.self.value.bias, frozen: 764, train: 4, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.4.attention.self.value.bias
checking:bert.encoder.layer.4.attention.output.dense.weight, frozen: 714, train: 54, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.4.attention.output.dense.weight
checking:bert.encoder.layer.4.attention.output.dense.bias, frozen: 714, train: 54, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.4.attention.output.dense.bias
checking:bert.encoder.layer.4.intermediate.dense.weight, frozen: 3069, train: 3, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.4.intermediate.dense.weight
checking:bert.encoder.layer.4.intermediate.dense.bias, frozen: 3069, train: 3, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.4.intermediate.dense.bias
checking:bert.encoder.layer.4.output.dense.weight, frozen: 695, train: 73, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.4.output.dense.weight
checking:bert.encoder.layer.4.output.dense.bias, frozen: 695, train: 73, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.4.output.dense.bias
checking:bert.encoder.layer.5.attention.self.query.weight, frozen: 742, train: 26, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.5.attention.self.query.weight
checking:bert.encoder.layer.5.attention.self.query.bias, frozen: 742, train: 26, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.5.attention.self.query.bias
checking:bert.encoder.layer.5.attention.self.key.weight, frozen: 767, train: 1, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.5.attention.self.key.weight
checking:bert.encoder.layer.5.attention.self.key.bias, frozen: 767, train: 1, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.5.attention.self.key.bias
checking:bert.encoder.layer.5.attention.self.value.weight, frozen: 768, train: 0, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.5.attention.self.value.weight
checking:bert.encoder.layer.5.attention.self.value.bias, frozen: 768, train: 0, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.5.attention.self.value.bias
checking:bert.encoder.layer.5.attention.output.dense.weight, frozen: 678, train: 90, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.5.attention.output.dense.weight
checking:bert.encoder.layer.5.attention.output.dense.bias, frozen: 678, train: 90, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.5.attention.output.dense.bias
checking:bert.encoder.layer.5.intermediate.dense.weight, frozen: 3059, train: 13, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.5.intermediate.dense.weight
checking:bert.encoder.layer.5.intermediate.dense.bias, frozen: 3059, train: 13, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.5.intermediate.dense.bias
checking:bert.encoder.layer.5.output.dense.weight, frozen: 656, train: 112, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.5.output.dense.weight
checking:bert.encoder.layer.5.output.dense.bias, frozen: 656, train: 112, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.5.output.dense.bias
checking:bert.encoder.layer.6.attention.self.query.weight, frozen: 754, train: 14, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.6.attention.self.query.weight
checking:bert.encoder.layer.6.attention.self.query.bias, frozen: 754, train: 14, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.6.attention.self.query.bias
checking:bert.encoder.layer.6.attention.self.key.weight, frozen: 768, train: 0, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.6.attention.self.key.weight
checking:bert.encoder.layer.6.attention.self.key.bias, frozen: 768, train: 0, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.6.attention.self.key.bias
checking:bert.encoder.layer.6.attention.self.value.weight, frozen: 766, train: 2, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.6.attention.self.value.weight
checking:bert.encoder.layer.6.attention.self.value.bias, frozen: 766, train: 2, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.6.attention.self.value.bias
checking:bert.encoder.layer.6.attention.output.dense.weight, frozen: 638, train: 130, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.6.attention.output.dense.weight
checking:bert.encoder.layer.6.attention.output.dense.bias, frozen: 638, train: 130, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.6.attention.output.dense.bias
checking:bert.encoder.layer.6.intermediate.dense.weight, frozen: 3057, train: 15, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.6.intermediate.dense.weight
checking:bert.encoder.layer.6.intermediate.dense.bias, frozen: 3057, train: 15, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.6.intermediate.dense.bias
checking:bert.encoder.layer.6.output.dense.weight, frozen: 652, train: 116, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.6.output.dense.weight
checking:bert.encoder.layer.6.output.dense.bias, frozen: 652, train: 116, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.6.output.dense.bias
checking:bert.encoder.layer.7.attention.self.query.weight, frozen: 748, train: 20, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.7.attention.self.query.weight
checking:bert.encoder.layer.7.attention.self.query.bias, frozen: 748, train: 20, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.7.attention.self.query.bias
checking:bert.encoder.layer.7.attention.self.key.weight, frozen: 768, train: 0, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.7.attention.self.key.weight
checking:bert.encoder.layer.7.attention.self.key.bias, frozen: 768, train: 0, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.7.attention.self.key.bias
checking:bert.encoder.layer.7.attention.self.value.weight, frozen: 768, train: 0, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.7.attention.self.value.weight
checking:bert.encoder.layer.7.attention.self.value.bias, frozen: 768, train: 0, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.7.attention.self.value.bias
checking:bert.encoder.layer.7.attention.output.dense.weight, frozen: 621, train: 147, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.7.attention.output.dense.weight
checking:bert.encoder.layer.7.attention.output.dense.bias, frozen: 621, train: 147, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.7.attention.output.dense.bias
checking:bert.encoder.layer.7.intermediate.dense.weight, frozen: 3057, train: 15, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.7.intermediate.dense.weight
checking:bert.encoder.layer.7.intermediate.dense.bias, frozen: 3057, train: 15, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.7.intermediate.dense.bias
checking:bert.encoder.layer.7.output.dense.weight, frozen: 619, train: 149, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.7.output.dense.weight
checking:bert.encoder.layer.7.output.dense.bias, frozen: 619, train: 149, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.7.output.dense.bias
checking:bert.encoder.layer.8.attention.self.query.weight, frozen: 728, train: 40, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.8.attention.self.query.weight
checking:bert.encoder.layer.8.attention.self.query.bias, frozen: 728, train: 40, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.8.attention.self.query.bias
checking:bert.encoder.layer.8.attention.self.key.weight, frozen: 767, train: 1, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.8.attention.self.key.weight
checking:bert.encoder.layer.8.attention.self.key.bias, frozen: 767, train: 1, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.8.attention.self.key.bias
checking:bert.encoder.layer.8.attention.self.value.weight, frozen: 768, train: 0, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.8.attention.self.value.weight
checking:bert.encoder.layer.8.attention.self.value.bias, frozen: 768, train: 0, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.8.attention.self.value.bias
checking:bert.encoder.layer.8.attention.output.dense.weight, frozen: 582, train: 186, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.8.attention.output.dense.weight
checking:bert.encoder.layer.8.attention.output.dense.bias, frozen: 582, train: 186, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.8.attention.output.dense.bias
checking:bert.encoder.layer.8.intermediate.dense.weight, frozen: 3025, train: 47, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.8.intermediate.dense.weight
checking:bert.encoder.layer.8.intermediate.dense.bias, frozen: 3025, train: 47, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.8.intermediate.dense.bias
checking:bert.encoder.layer.8.output.dense.weight, frozen: 547, train: 221, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.8.output.dense.weight
checking:bert.encoder.layer.8.output.dense.bias, frozen: 547, train: 221, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.8.output.dense.bias
checking:bert.encoder.layer.9.attention.self.query.weight, frozen: 723, train: 45, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.9.attention.self.query.weight
checking:bert.encoder.layer.9.attention.self.query.bias, frozen: 723, train: 45, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.9.attention.self.query.bias
checking:bert.encoder.layer.9.attention.self.key.weight, frozen: 753, train: 15, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.9.attention.self.key.weight
checking:bert.encoder.layer.9.attention.self.key.bias, frozen: 753, train: 15, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.9.attention.self.key.bias
checking:bert.encoder.layer.9.attention.self.value.weight, frozen: 765, train: 3, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.9.attention.self.value.weight
checking:bert.encoder.layer.9.attention.self.value.bias, frozen: 765, train: 3, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.9.attention.self.value.bias
checking:bert.encoder.layer.9.attention.output.dense.weight, frozen: 530, train: 238, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.9.attention.output.dense.weight
checking:bert.encoder.layer.9.attention.output.dense.bias, frozen: 530, train: 238, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.9.attention.output.dense.bias
checking:bert.encoder.layer.9.intermediate.dense.weight, frozen: 3023, train: 49, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.9.intermediate.dense.weight
checking:bert.encoder.layer.9.intermediate.dense.bias, frozen: 3023, train: 49, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.9.intermediate.dense.bias
checking:bert.encoder.layer.9.output.dense.weight, frozen: 528, train: 240, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.9.output.dense.weight
checking:bert.encoder.layer.9.output.dense.bias, frozen: 528, train: 240, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.9.output.dense.bias
checking:bert.encoder.layer.10.attention.self.query.weight, frozen: 650, train: 118, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.10.attention.self.query.weight
checking:bert.encoder.layer.10.attention.self.query.bias, frozen: 650, train: 118, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.10.attention.self.query.bias
checking:bert.encoder.layer.10.attention.self.key.weight, frozen: 763, train: 5, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.10.attention.self.key.weight
checking:bert.encoder.layer.10.attention.self.key.bias, frozen: 763, train: 5, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.10.attention.self.key.bias
checking:bert.encoder.layer.10.attention.self.value.weight, frozen: 764, train: 4, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.10.attention.self.value.weight
checking:bert.encoder.layer.10.attention.self.value.bias, frozen: 764, train: 4, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.10.attention.self.value.bias
checking:bert.encoder.layer.10.attention.output.dense.weight, frozen: 482, train: 286, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.10.attention.output.dense.weight
checking:bert.encoder.layer.10.attention.output.dense.bias, frozen: 482, train: 286, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.10.attention.output.dense.bias
checking:bert.encoder.layer.10.intermediate.dense.weight, frozen: 3008, train: 64, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.10.intermediate.dense.weight
checking:bert.encoder.layer.10.intermediate.dense.bias, frozen: 3008, train: 64, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.10.intermediate.dense.bias
checking:bert.encoder.layer.10.output.dense.weight, frozen: 457, train: 311, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.10.output.dense.weight
checking:bert.encoder.layer.10.output.dense.bias, frozen: 457, train: 311, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.10.output.dense.bias
checking:bert.encoder.layer.11.attention.self.query.weight, frozen: 632, train: 136, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.11.attention.self.query.weight
checking:bert.encoder.layer.11.attention.self.query.bias, frozen: 632, train: 136, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.11.attention.self.query.bias
checking:bert.encoder.layer.11.attention.self.key.weight, frozen: 759, train: 9, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.11.attention.self.key.weight
checking:bert.encoder.layer.11.attention.self.key.bias, frozen: 759, train: 9, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.11.attention.self.key.bias
checking:bert.encoder.layer.11.attention.self.value.weight, frozen: 766, train: 2, Total : 768 : torch.Size([768, 768])
exlude_grad func : bert.encoder.layer.11.attention.self.value.weight
checking:bert.encoder.layer.11.attention.self.value.bias, frozen: 766, train: 2, Total : 768 : torch.Size([768])
exlude_grad func : bert.encoder.layer.11.attention.self.value.bias
checking:bert.encoder.layer.11.attention.output.dense.weight, frozen: 382, train: 386, Total : 768 : torch.Size([768, 768])
exlude_grad func dense : bert.encoder.layer.11.attention.output.dense.weight
checking:bert.encoder.layer.11.attention.output.dense.bias, frozen: 382, train: 386, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.11.attention.output.dense.bias
checking:bert.encoder.layer.11.intermediate.dense.weight, frozen: 3001, train: 71, Total : 3072 : torch.Size([3072, 768])
exlude_grad func dense : bert.encoder.layer.11.intermediate.dense.weight
checking:bert.encoder.layer.11.intermediate.dense.bias, frozen: 3001, train: 71, Total : 3072 : torch.Size([3072])
exlude_grad func dense : bert.encoder.layer.11.intermediate.dense.bias
checking:bert.encoder.layer.11.output.dense.weight, frozen: 344, train: 424, Total : 768 : torch.Size([768, 3072])
exlude_grad func dense : bert.encoder.layer.11.output.dense.weight
checking:bert.encoder.layer.11.output.dense.bias, frozen: 344, train: 424, Total : 768 : torch.Size([768])
exlude_grad func dense : bert.encoder.layer.11.output.dense.bias
bert.encoder.layer.0.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.0.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.0.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.0.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.0.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.0.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.0.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.0.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.0.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.0.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.0.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.0.output.dense.bias: torch.Size([768])
bert.encoder.layer.1.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.1.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.1.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.1.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.1.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.1.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.1.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.1.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.1.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.1.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.1.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.1.output.dense.bias: torch.Size([768])
bert.encoder.layer.2.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.2.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.2.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.2.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.2.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.2.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.2.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.2.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.2.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.2.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.2.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.2.output.dense.bias: torch.Size([768])
bert.encoder.layer.3.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.3.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.3.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.3.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.3.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.3.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.3.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.3.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.3.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.3.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.3.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.3.output.dense.bias: torch.Size([768])
bert.encoder.layer.4.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.4.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.4.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.4.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.4.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.4.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.4.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.4.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.4.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.4.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.4.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.4.output.dense.bias: torch.Size([768])
bert.encoder.layer.5.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.5.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.5.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.5.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.5.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.5.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.5.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.5.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.5.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.5.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.5.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.5.output.dense.bias: torch.Size([768])
bert.encoder.layer.6.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.6.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.6.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.6.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.6.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.6.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.6.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.6.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.6.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.6.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.6.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.6.output.dense.bias: torch.Size([768])
bert.encoder.layer.7.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.7.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.7.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.7.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.7.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.7.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.7.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.7.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.7.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.7.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.7.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.7.output.dense.bias: torch.Size([768])
bert.encoder.layer.8.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.8.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.8.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.8.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.8.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.8.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.8.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.8.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.8.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.8.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.8.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.8.output.dense.bias: torch.Size([768])
bert.encoder.layer.9.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.9.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.9.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.9.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.9.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.9.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.9.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.9.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.9.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.9.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.9.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.9.output.dense.bias: torch.Size([768])
bert.encoder.layer.10.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.10.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.10.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.10.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.10.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.10.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.10.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.10.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.10.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.10.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.10.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.10.output.dense.bias: torch.Size([768])
bert.encoder.layer.11.attention.self.query.weight: torch.Size([768, 768])
bert.encoder.layer.11.attention.self.query.bias: torch.Size([768])
bert.encoder.layer.11.attention.self.key.weight: torch.Size([768, 768])
bert.encoder.layer.11.attention.self.key.bias: torch.Size([768])
bert.encoder.layer.11.attention.self.value.weight: torch.Size([768, 768])
bert.encoder.layer.11.attention.self.value.bias: torch.Size([768])
bert.encoder.layer.11.attention.output.dense.weight: torch.Size([768, 768])
bert.encoder.layer.11.attention.output.dense.bias: torch.Size([768])
bert.encoder.layer.11.intermediate.dense.weight: torch.Size([3072, 768])
bert.encoder.layer.11.intermediate.dense.bias: torch.Size([3072])
bert.encoder.layer.11.output.dense.weight: torch.Size([768, 3072])
bert.encoder.layer.11.output.dense.bias: torch.Size([768])
Comparing weight checking Done!
========= train_data ===========
